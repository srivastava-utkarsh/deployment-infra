AWSTemplateFormatVersion: "2010-09-09"
Description: Microservices VPC with EC2, IAM role, latest Amazon Linux 2 AMI via SSM.

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  MicroservicesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MicroservicesVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroservicesVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MicroservicesIGW

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MicroservicesVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroservicesVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MicroservicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and app traffic
      VpcId: !Ref MicroservicesVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9897
          ToPort: 9897
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MicroservicesSG

  # --- IAM ROLE FOR EC2 ---
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        # Add any other managed policies your EC2 needs (S3, CloudWatch, etc.)

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref EC2InstanceRole ]
      Path: /

  MicroservicesEC2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref MicroservicesSG
      Tags:
        - Key: Name
          Value: microservices-ec2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Essential OS/Docker setup
          yum update -y
          amazon-linux-extras install docker -y
          service docker start
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install git -y
          # Optional: git clone your repo/setup here, or use deploy.sh by SSH or automation
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MicroservicesEC2 --region ${AWS::Region}

Outputs:
  EC2PublicIP:
    Description: Public IP address of the microservices EC2 instance
    Value: !GetAtt MicroservicesEC2.PublicIp

  EC2PublicDNS:
    Description: Public DNS name of the microservices EC2 instance
    Value: !GetAtt MicroservicesEC2.PublicDnsName