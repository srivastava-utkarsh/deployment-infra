name: Deploy CloudFormation and Microservices

on:
  workflow_dispatch:

env:
  STACK_NAME: microservices-stack
  AWS_REGION: ap-south-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clean AWS environment
        run: |
          rm -rf ~/.aws || true
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_REGION

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS OIDC Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339495302685:role/github-ecr-role
          aws-region: ap-south-1
          role-session-name: GitHubActionsSession-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Clone all microservice repos
        run: |
          git clone https://github.com/srivastava-utkarsh/authservice.git
          git clone https://github.com/srivastava-utkarsh/gateway.git
          git clone https://github.com/srivastava-utkarsh/userservice.git

      - name: Build and push Docker images to ECR (only if image doesn't exist)
        run: |
          for repo in authservice gateway userservice; do
            cd $repo
            IMAGE_TAG=latest
            IMAGE_URI=339495302685.dkr.ecr.ap-south-1.amazonaws.com/$repo:$IMAGE_TAG
            aws ecr describe-repositories --repository-names $repo || aws ecr create-repository --repository-name $repo

            # Only push if image:tag doesn't already exist in ECR
            IMAGE_EXISTS=$(aws ecr list-images --repository-name $repo --filter tagStatus=TAGGED --query "imageIds[?imageTag=='$IMAGE_TAG'] | length(@)" --output text)
            if [ "$IMAGE_EXISTS" -eq 0 ]; then
              echo "Image $IMAGE_URI does not exist in ECR. Building and pushing..."
              docker build -t $IMAGE_URI .
              docker push $IMAGE_URI
            else
              echo "Image $IMAGE_URI already exists in ECR. Skipping build & push."
            fi
            cd ..
          done

      - name: Validate CloudFormation Template
        run: aws cloudformation validate-template --template-body file://cloudformation.yml --region ap-south-1

      - name: Sanity check for forbidden properties
        run: |
          if grep -q AssociatePublicIpAddress cloudformation.yml; then
            echo "ERROR: Found forbidden AssociatePublicIpAddress property in template."
            exit 1
          fi

      - name: Delete old stack if in ROLLBACK_COMPLETE
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name microservices-stack --region ap-south-1 --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DELETE")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting stuck stack before redeploying..."
            aws cloudformation delete-stack --stack-name microservices-stack --region ap-south-1
            aws cloudformation wait stack-delete-complete --stack-name microservices-stack --region ap-south-1
          fi

      - name: Deploy CloudFormation Stack
        run: |
          set -x
          echo "========= Deploying CloudFormation Stack ========="
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name microservices-stack --region ap-south-1 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DELETE")
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack in ROLLBACK_COMPLETE. Deleting stack..."
            aws cloudformation delete-stack --stack-name microservices-stack --region ap-south-1
            aws cloudformation wait stack-delete-complete --stack-name microservices-stack --region ap-south-1
          fi
          aws cloudformation deploy \
            --stack-name microservices-stack \
            --template-file cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ap-south-1 \
            --no-fail-on-empty-changeset \
            --force-upload \
            --parameter-overrides KeyName=cloudformationdeploy
            echo "========= CloudFormation Deployment Complete ======"
            aws cloudformation describe-stacks --stack-name microservices-stack --region ap-south-1 \
              --query "Stacks[0].Outputs" --output table

      - name: Print CloudFormation Stack Events (on failure)
        if: failure()
        run: |
          echo "========= CloudFormation CREATE_FAILED Events ========="
          aws cloudformation describe-stack-events \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].[LogicalResourceId, ResourceStatusReason]" \
            --output table

      - name: Print EC2 Console Output (on failure)
        if: failure()
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME --region $AWS_REGION --logical-resource-id MicroservicesEC2 --query 'StackResources[0].PhysicalResourceId' --output text)
          echo "EC2 Instance ID: $INSTANCE_ID"
          aws ec2 get-console-output --instance-id $INSTANCE_ID --region $AWS_REGION --output text || true


      - name: Print CloudFormation Stack Events (Always)
        if: always()
        run: |
          echo "========= Printing last 20 CloudFormation stack events ========="
          aws cloudformation describe-stack-events \
            --stack-name microservices-stack \
            --region ap-south-1 \
            --query "StackEvents[0:20].[Timestamp,LogicalResourceId,ResourceType,ResourceStatus,ResourceStatusReason]" \
            --output table || echo "No events found (stack may not exist yet)."

      - name: Get EC2 Public DNS from stack output
        id: get-ec2-host
        run: |
          HOST=$(aws cloudformation describe-stacks \
            --stack-name microservices-stack \
            --region ap-south-1 \
            --query "Stacks[0].Outputs[?OutputKey=='EC2PublicDNS'].OutputValue" \
            --output text)
          echo "EC2_HOST=$HOST" >> $GITHUB_ENV
          echo "Detected EC2 Host: $HOST"

      - name: Sanity check for EC2 instance before SSH
        run: |
          if [ -z "$EC2_HOST" ]; then
            echo "No EC2 instance detected (CloudFormation failed). Skipping SSH deploy."
            exit 1
          fi

      - name: Deploy App via SSH
        uses: appleboy/ssh-action@master
        env:   # <-- NEW: Pass these secrets to SSH environment
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
        with:
          host: ${{ env.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            TARGET_DIR=/home/ec2-user/deployment-infra
            REPO_URL=https://github.com/srivastava-utkarsh/deployment-infra.git
            # -------- 1. make sure git exists -----------
            if ! command -v git &>/dev/null; then
              echo "[INFO] Installing git …"
              sudo yum install -y git
            fi
            # -------- 2. sync repo safely ---------------
            echo "[INFO] Syncing deployment-infra repo …"
            if [ -d "$TARGET_DIR/.git" ]; then
              git -C "$TARGET_DIR" fetch --all
              git -C "$TARGET_DIR" reset --hard origin/main
            else
              sudo rm -rf "$TARGET_DIR"
              git clone --depth 1 "$REPO_URL" "$TARGET_DIR"
            fi
            # -------- 3. write secrets ------------------
            cat > "$TARGET_DIR/.env" <<EOF
            MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            MYSQL_DB=${MYSQL_DB}
            EOF
            echo "[INFO] Dumping .env file for verification:"
            cat "$TARGET_DIR/.env"
            chmod 600 "$TARGET_DIR/.env"
            # -------- 4. run deploy script --------------
            chmod +x "$TARGET_DIR/deploy.sh"
            cd "$TARGET_DIR"
            ./deploy.sh

