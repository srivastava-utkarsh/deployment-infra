name: Deploy CloudFormation and Microservices

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clean AWS environment
        run: |
          rm -rf ~/.aws || true
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_REGION

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS OIDC Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339495302685:role/github-ecr-role
          aws-region: ap-south-1
          role-session-name: GitHubActionsSession-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Validate CloudFormation Template
        run: aws cloudformation validate-template --template-body file://cloudformation.yml --region ap-south-1

      - name: Sanity check for forbidden properties
        run: |
          if grep -q AssociatePublicIpAddress cloudformation.yml; then
            echo "ERROR: Found forbidden AssociatePublicIpAddress property in template."
            exit 1
          fi

      - name: Deploy CloudFormation Stack
        run: |
          set -x
          echo "========= Deploying CloudFormation Stack ========="
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name microservices-stack --region ap-south-1 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DELETE")
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack in ROLLBACK_COMPLETE. Deleting stack..."
            aws cloudformation delete-stack --stack-name microservices-stack --region ap-south-1
            aws cloudformation wait stack-delete-complete --stack-name microservices-stack --region ap-south-1
          fi
          aws cloudformation deploy \
            --stack-name microservices-stack \
            --template-file cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ap-south-1 \
            --no-fail-on-empty-changeset \
            --force-upload \
            --parameter-overrides KeyName=cloudformationdeploy || (
            echo "Deployment failed. Showing stack CREATE_FAILED reasons:" ;
            aws cloudformation describe-stack-events --stack-name microservices-stack --region ap-south-1 --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].{Resource:LogicalResourceId,Reason:ResourceStatusReason}" --output table ;
            exit 1 )
          echo "========= CloudFormation Deployment Complete ======"
          aws cloudformation describe-stacks --stack-name microservices-stack --region ap-south-1 \
            --query "Stacks[0].Outputs" --output table

      - name: Print CloudFormation Stack Events (Always)
        if: always()
        run: |
          echo "========= Printing last 20 CloudFormation stack events ========="
          aws cloudformation describe-stack-events \
            --stack-name microservices-stack \
            --region ap-south-1 \
            --query "StackEvents[0:20].[Timestamp,LogicalResourceId,ResourceType,ResourceStatus,ResourceStatusReason]" \
            --output table || echo "No events found (stack may not exist yet)."

      - name: Get EC2 Public DNS from stack output
        id: get-ec2-host
        run: |
          HOST=$(aws cloudformation describe-stacks \
            --stack-name microservices-stack \
            --region ap-south-1 \
            --query "Stacks[0].Outputs[?OutputKey=='EC2PublicDNS'].OutputValue" \
            --output text)
          echo "EC2_HOST=$HOST" >> $GITHUB_ENV
          echo "Detected EC2 Host: $HOST"

      - name: Deploy App via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_ec2_output.outputs.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            echo "===== Installing git if not present ====="
            if ! command -v git &> /dev/null; then
              sudo yum install git -y
            fi
            echo "===== Cloning repo if not present ====="
            cd /home/ec2-user
            if [ ! -d deployment-infra ]; then
              git clone https://github.com/srivastava-utkarsh/deployment-infra.git
            fi
            cd deployment-infra
            echo "===== Setting up Docker & Compose ====="
            sudo yum install -y docker
            sudo systemctl start docker
            sudo usermod -aG docker ec2-user
            # (optional, if using compose v2 as plugin, install that here)
            echo "===== Running deploy.sh ====="
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh

